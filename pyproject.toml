[project]
name = "local_migrator"
description = "Package for simplify data structures migrations"
readme = "README.rst"
requires-python = ">=3.8"
license = {text = "MIT"}
keywords = ["napari", "migration", "persistance"]
authors = [
  {email = "g.bokota@uw.edu.pl"},
  {name = "Grzegorz Bokota"}
]
maintainers = []
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]

dependencies = [
  "packaging",
]
dynamic = [
    "version",
]

[project.optional-dependencies]
test = [
  "pytest > 7.0.0",
  "pydantic",
  "numpy",
  "napari; python_version < '3.11'",
]
cbor = [
    "cbor2"
]

[project.entry-points.pytest11]
local_migrator = "local_migrator._testsupport"

[project.urls]
Homepage = "https://github.com/Czaki/local_migrator"
Documentation = "https://local_migrator.readthedocs.io/en/latest/"
Repository = "https://github.com/Czaki/local_migrator"

[build-system]
# Minimum requirements for the build system to execute.
requires = ["setuptools>=61.0.0", "wheel>=0.37.0", "setuptools_scm[toml]>=6.4"]  # PEP 508 specifications.
build-backend = "setuptools.build_meta"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ""
testpaths = [
    "src/tests",
]

[tool.setuptools_scm]
write_to = "src/local_migrator/version.py"

[tool.black]
line-length = 120
target-version = ['py36']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
  | package/PartSeg/version.py
)
'''

[tool.ruff]
line-length = 120
select = [
    "F", # Pyflakes
    "E", "W", # pycodestyle
    "C90", # mccabe
    "I", # isort
    "UP", # pyupgrade
    "A", # flake8-builtins
    "YTT", # flake8-2020
    "S", # flake8-bandit
    # "BLE", # flake8-blind-except
    "B", # lake8-bugbear
    "A", #flake8-builtins
    "C4", # flake8-comprehensions
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "PIE", # flake8-pie
    "PT", # flake8-pytest-style
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PGH", # pygrep-hooks
    "PLC", "PLE", "PLR", "PLW", # pylint
    "NPY", # NumPy-specific rules
    "RUF", # Ruff-specific rules
]
ignore = ["A003"]
exclude = ["examples/call_simple_threshold.py"]
target-version = "py38"
fix = true

[tool.ruff.isort]
known-first-party=['local_migrator']


[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 15

[tool.ruff.per-file-ignores]
"docs/conf.py" = ["A001"]
"src/tests/**" = ["ARG", "PLC1901", "S101", "PLR2004"]
"examples/**" = ["S101"]
